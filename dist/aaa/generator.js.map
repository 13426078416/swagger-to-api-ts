{"version":3,"sources":["../../src/aaa/generator.js"],"names":["generator","input","config","apis","types","constantsCounter","constants","getConstantName","value","constant","find","_constant","name","push","paths","forEach","endPoint","parametersExtended","parameters","method","options","operationId","security","allParameters","undefined","map","parameter","$ref","replace","components","schema","serviceName","pathParams","queryParams","exist","isQueryParamsNullable","isNullable","queryParameters","params","queryParamsTypeName","tags","type","nullable","properties","reduce","prev","required","description","headerParams","hasNullableHeaderParams","hasNullable","requestBody","getBodyContent","contentType","content","requestBodies","accept","responses","pathParamsRefString","additionalAxiosConfig","summary","deprecated","isHeaderParamsNullable","schemas","key","_requestBody","filter","v","code","hooks","reactHooks","error","console"],"mappings":"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","file":"generator.js","sourcesContent":["import {\n  getPathParams,\n  generateServiceName,\n  getHeaderParams,\n  getParametersInfo,\n  getRefName,\n  toPascalCase,\n} from \"./utils\";\nimport { generateApis } from \"./generateApis\";\nimport { generateTypes } from \"./generateTypes\";\nimport { generateConstants } from \"./generateConstants\";\nimport { generateHook } from \"./generateHook\";\n\nfunction generator(input, config) {\n  const apis = [];\n  const types = [];\n  let constantsCounter = 0;\n  const constants = [];\n\n  function getConstantName(value) {\n    const constant = constants.find((_constant) => _constant.value === value);\n    if (constant) {\n      return constant.name;\n    }\n\n    const name = `_CONSTANT${constantsCounter++}`;\n\n    constants.push({\n      name,\n      value,\n    });\n\n    return name;\n  }\n\n  try {\n    Object.entries(input.paths).forEach(([endPoint, value]) => {\n      const parametersExtended = value.parameters;\n      Object.entries(value).forEach(([method, options]) => {\n        if (method === \"parameters\") {\n          return;\n        }\n\n        const { operationId, security } = options;\n\n        const allParameters =\n          parametersExtended || options.parameters\n            ? [...(parametersExtended || []), ...(options.parameters || [])]\n            : undefined;\n\n        const parameters = (allParameters || []).map((parameter) => {\n          const { $ref } = parameter;\n          if ($ref) {\n            const name = $ref.replace(\"#/components/parameters/\", \"\");\n            return {\n              ...input.components.parameters[name],\n              $ref,\n              schema: { $ref },\n            };\n          }\n          return parameter;\n        });\n\n        const serviceName = generateServiceName(\n          endPoint,\n          method,\n          operationId,\n          config\n        );\n\n        const pathParams = getPathParams(parameters);\n\n        const {\n          exist: queryParams,\n          isNullable: isQueryParamsNullable,\n          params: queryParameters,\n        } = getParametersInfo(parameters, \"query\");\n        let queryParamsTypeName = `${toPascalCase(serviceName)}QueryParams`;\n\n        queryParamsTypeName = queryParams && queryParamsTypeName;\n\n        if (queryParamsTypeName) {\n          types.push({\n            tags: options.tags,\n            name: queryParamsTypeName,\n            schema: {\n              type: \"object\",\n              nullable: isQueryParamsNullable,\n              properties: queryParameters.reduce(\n                (prev, { name, schema, $ref, required, description }) => {\n                  return {\n                    ...prev,\n                    [name]: {\n                      ...($ref ? { $ref } : schema),\n                      nullable: !required,\n                      description,\n                    },\n                  };\n                },\n                {}\n              ),\n            },\n          });\n        }\n\n        const { params: headerParams, hasNullable: hasNullableHeaderParams } =\n          getHeaderParams(parameters, config);\n\n        const requestBody = getBodyContent(options.requestBody);\n\n        const contentType = Object.keys(\n          (options.requestBody && options.requestBody.content) ||\n            (options.requestBody &&\n              options.requestBody.$ref &&\n              input.components &&\n              input.components.requestBodies[\n                getRefName(options.requestBody.$ref)\n              ].content) || {\n              \"application/json\": null,\n            }\n        )[0];\n\n        const accept = Object.keys(\n          options.responses[200].content || {\n            \"application/json\": null,\n          }\n        )[0];\n\n        const responses = getBodyContent(options.responses[200]);\n\n        let pathParamsRefString = pathParams.reduce(\n          (prev, { name }) => `${prev}${name},`,\n          \"\"\n        );\n        pathParamsRefString = pathParamsRefString\n          ? `{${pathParamsRefString}}`\n          : undefined;\n\n        const additionalAxiosConfig = headerParams\n          ? `{\n              headers:{\n                ...${getConstantName(`{\n                  \"Content-Type\": \"${contentType}\",\n                  Accept: \"${accept}\",\n\n                }`)},\n                ...headerParams,\n              },\n            }`\n          : getConstantName(`{\n              headers: {\n                \"Content-Type\": \"${contentType}\",\n                Accept: \"${accept}\",\n              },\n            }`);\n\n        apis.push({\n          tags: options.tags,\n          contentType,\n          summary: options.summary,\n          deprecated: options.deprecated,\n          serviceName,\n          queryParamsTypeName,\n          pathParams,\n          requestBody,\n          headerParams,\n          isQueryParamsNullable,\n          isHeaderParamsNullable: hasNullableHeaderParams,\n          responses,\n          pathParamsRefString,\n          endPoint,\n          method: method,\n          security: security\n            ? getConstantName(JSON.stringify(security))\n            : \"undefined\",\n          additionalAxiosConfig,\n          queryParameters,\n        });\n      });\n    });\n\n    if (input.components.schemas) {\n      types.push(\n        ...Object.entries(input.components.schemas).map(([name, schema]) => {\n          return {\n            name,\n            schema,\n          };\n        })\n      );\n    }\n\n    if (input.components.parameters) {\n      types.push(\n        ...Object.entries(input.components.parameters).map(([key, value]) => ({\n          ...value,\n          name: key,\n        }))\n      );\n    }\n\n    if (input.components.requestBodies) {\n      types.push(\n        ...Object.entries(input.components.requestBodies)\n          .map(([name, _requestBody]) => {\n            return {\n              name: `RequestBody${name}`,\n              schema: Object.values(_requestBody.content || {})[0].schema,\n              description: _requestBody.description,\n            };\n          })\n          .filter((v) => v.schema)\n      );\n    }\n\n    let code = generateApis(apis, types, config);\n    code += generateConstants(constants);\n    const type = generateTypes(types, config);\n    const hooks = config.reactHooks ? generateHook(apis, types, config) : \"\";\n\n    return { code, hooks, type };\n  } catch (error) {\n    console.error({ error });\n    return { code: \"\", hooks: \"\", type: \"\" };\n  }\n}\n\nfunction getBodyContent(responses) {\n  if (!responses) {\n    return responses;\n  }\n\n  return responses.content\n    ? Object.values(responses.content)[0].schema\n    : responses.$ref\n    ? {\n        $ref: responses.$ref,\n      }\n    : undefined;\n}\n\nexport { generator };\n"]}