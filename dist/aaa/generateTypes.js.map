{"version":3,"sources":["../../src/aaa/generateTypes.js"],"names":["generateTypes","types","config","code","AUTOGENERATED_COMMENT","sort","name","_name","reduce","prev","schema","description","deprecated","String","undefined","getTypeDefinition","error","console","generateEnumAsType","type","Enum","enum","enumNames","allOf","oneOf","items","$ref","additionalProperties","properties","map","e","join","index","typeObject"],"mappings":"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","file":"generateTypes.js","sourcesContent":["import { getRefName, getSchemaName, getTsType, isAscending } from \"./utils\";\nimport { AUTOGENERATED_COMMENT } from \"./strings\";\nimport { getJsdoc } from \"./utilities/jsdoc\";\n\nfunction generateTypes(types, config) {\n  let code = AUTOGENERATED_COMMENT;\n  try {\n    code += types\n      .sort(({ name }, { name: _name }) => isAscending(name, _name))\n      .reduce((prev, { name: _name, schema, description }) => {\n        const name = getSchemaName(_name);\n        prev += `\n        ${getJsdoc({\n          ...schema,\n          description: description || schema.description,\n          deprecated: schema.deprecated\n            ? schema[\"x-deprecatedMessage\"] || String(schema.deprecated)\n            : undefined,\n        })}\n        ${getTypeDefinition(name, schema, config)}\n        `;\n\n        return prev;\n      }, \"\");\n\n    return code;\n  } catch (error) {\n    console.error({ error });\n    return \"\";\n  }\n}\n\nfunction getTypeDefinition(name, schema, { generateEnumAsType }) {\n  const {\n    type,\n    enum: Enum,\n    \"x-enumNames\": enumNames,\n    allOf,\n    oneOf,\n    items,\n    $ref,\n    additionalProperties,\n    properties,\n  } = schema;\n\n  if (Enum) {\n    if (generateEnumAsType) {\n      return `export type ${name} =${Enum.map((e) => `\"${e}\"`).join(\" | \")};`;\n    }\n    return `export enum ${name} {${Enum.map(\n      (e, index) =>\n        `${enumNames ? enumNames[index] : e}=${\n          typeof e === \"string\" ? `\"${e}\"` : `${e}`\n        }`\n    )}}`;\n  }\n\n  if (allOf || oneOf) {\n    return `export type ${name} = ${getTsType(schema)}`;\n  }\n\n  if (type === \"array\" && items) {\n    return `export type ${name} = ${getTsType(items)}[]`;\n  }\n\n  if ($ref) {\n    return `export type ${name} = ${getRefName($ref)}`;\n  }\n\n  if (type === \"object\") {\n    const typeObject = getTsType(schema);\n\n    if ((additionalProperties || properties) && !oneOf) {\n      return `export interface ${name} ${typeObject}`;\n    }\n\n    return `export type ${name} = ${typeObject}`;\n  }\n\n  if (type === \"string\") {\n    return `export type ${name} = ${type}`;\n  }\n\n  return `export type ${name} = any`;\n}\n\nexport { generateTypes };\n"]}