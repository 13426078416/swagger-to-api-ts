{"version":3,"sources":["../../src/aaa/utils.js"],"names":["getPathParams","parameters","filter","In","getHeaderParams","config","getParams","ignore","headerParams","type","ignoreParams","queryParamsArray","name","includes","params","getObjectType","hasNullable","every","schema","nullable","toPascalCase","str","substring","toUpperCase","replaceWithUpper","sp","pointArray","split","map","point","join","generateServiceName","endPoint","method","operationId","methodName","methodParamsByTag","prefix","_endPoint","replace","RegExp","endPointArr","paramsCount","value","path","methodNameTemplate","getTemplate","serviceName","template","defaultTemplate","hasMethodNameOperationId","test","TYPES","integer","number","boolean","object","string","array","getDefineParam","required","description","getParamString","getTsType","isPartial","isTypeAny","$ref","Enum","enum","items","properties","oneOf","additionalProperties","allOf","refArray","length","getRefName","t","result","pName","_schema","find","undefined","parameter","sort","_name","_nullable","isAscending","reduce","prev","deprecated","deprecatedMessage","example","getSchemaName","removeDot","removeBackTick","removeFirstBracket","removeLastBracket","parts","pop","a","b","getParametersInfo","in","exist","isNullable","majorVersionsCheck","expectedV","inputV","Error","expectedVMajor","inputVMajor","isValidPart","x","expectedMajorNumber","Number","inputMajorNumber","AnyValue","obj","forEach","key","re","isMatchWholeWord","stringToSearch","word"],"mappings":"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","file":"utils.js","sourcesContent":["import { getJsdoc } from \"./utilities/jsdoc\";\n\nfunction getPathParams(parameters) {\n  return (\n    parameters.filter(({ In }) => {\n      return In === \"path\";\n    }) || []\n  );\n}\n\nfunction getHeaderParams(parameters, config) {\n  return getParams(\n    parameters,\n    \"header\",\n    config.ignore && config.ignore.headerParams\n  );\n}\n\nfunction getParams(parameters, type, ignoreParams) {\n  const queryParamsArray =\n    parameters.filter(({ In, name }) => {\n      return In === type && !ignoreParams.includes(name);\n    }) || [];\n\n  const params = getObjectType(queryParamsArray);\n\n  return {\n    params,\n    hasNullable: queryParamsArray.every(({ schema = {} }) => schema.nullable),\n  };\n}\n\nfunction toPascalCase(str) {\n  return `${str.substring(0, 1).toUpperCase()}${str.substring(1)}`;\n}\nfunction replaceWithUpper(str, sp) {\n  let pointArray = str.split(sp);\n  pointArray = pointArray.map((point) => toPascalCase(point));\n\n  return pointArray.join(\"\");\n}\n\nfunction generateServiceName(endPoint, method, operationId, config) {\n  const { methodName, methodParamsByTag, prefix = \"\" } = config;\n\n  const _endPoint = endPoint.replace(new RegExp(`^${prefix}`, \"i\"), \"\");\n  let endPointArr = _endPoint.split(\"/\");\n  let paramsCount = 0;\n  endPointArr = endPointArr.map((value) => {\n    if (value.includes(\"{\")) {\n      return methodParamsByTag\n        ? `P${paramsCount++}`\n        : toPascalCase(value.replace(\"{\", \"\").replace(\"}\", \"\"));\n    }\n\n    return replaceWithUpper(value, \"-\");\n  });\n  const path = endPointArr.join(\"\");\n\n  const methodNameTemplate = getTemplate(methodName, operationId);\n\n  const serviceName = template(methodNameTemplate, {\n    path,\n    method,\n    ...(operationId ? { operationId } : {}),\n  });\n  return serviceName;\n}\n\nfunction getTemplate(methodName, operationId) {\n  const defaultTemplate = \"{method}{path}\";\n  if (!methodName) {\n    return defaultTemplate;\n  }\n\n  const hasMethodNameOperationId = /(\\{operationId\\})/i.test(methodName);\n\n  if (hasMethodNameOperationId) {\n    return operationId ? methodName : defaultTemplate;\n  }\n\n  return methodName;\n}\n\nconst TYPES = {\n  integer: \"number\",\n  number: \"number\",\n  boolean: \"boolean\",\n  object: \"object\",\n  string: \"string\",\n  array: \"array\",\n};\n\nfunction getDefineParam(name, required = false, schema, description) {\n  return getParamString(name, required, getTsType(schema), description);\n}\n\nfunction getParamString(name, required = false, type, description, isPartial) {\n  return `${getJsdoc({\n    description,\n  })}${name}${required ? \"\" : \"?\"}: ${isPartial ? `Partial<${type}>` : type}`;\n}\n\nfunction getTsType(schema) {\n  if (isTypeAny(schema)) {\n    return \"any\";\n  }\n\n  const {\n    type,\n    $ref,\n    enum: Enum,\n    items,\n    properties,\n    oneOf,\n    additionalProperties,\n    required,\n    allOf,\n  } = schema;\n\n  if ($ref) {\n    const refArray = $ref.split(\"/\");\n    if (refArray[refArray.length - 2] === \"requestBodies\") {\n      return `RequestBody${getRefName($ref)}`;\n    } else {\n      return getRefName($ref);\n    }\n  }\n  if (Enum) {\n    return `${Enum.map((t) => `\"${t}\"`).join(\" | \")}`;\n  }\n\n  if (items) {\n    return `${getTsType(items)}[]`;\n  }\n\n  let result = \"\";\n\n  if (properties) {\n    result += getObjectType(\n      Object.entries(properties).map(([pName, _schema]) => ({\n        schema: {\n          ..._schema,\n          nullable:\n            required && required.find((name) => name === pName)\n              ? false\n              : _schema.nullable !== undefined\n              ? _schema.nullable\n              : true,\n        },\n        name: pName,\n      }))\n    );\n  }\n\n  if (oneOf) {\n    result = `${result} & (${oneOf\n      .map((t) => `(${getTsType(t)})`)\n      .join(\" | \")})`;\n  }\n\n  if (allOf) {\n    result = `${result} & (${allOf\n      .map((_schema) => getTsType(_schema))\n      .join(\" & \")})`;\n  }\n\n  if (type === \"object\" && !result) {\n    if (additionalProperties) {\n      return `{[x: string]: ${getTsType(additionalProperties)}}`;\n    }\n\n    return \"{[x in string | number ]: any}\";\n  }\n\n  return result || TYPES[type];\n}\n\nfunction getObjectType(parameter) {\n  const object = parameter\n    .sort(\n      (\n        { name, schema: { nullable } = {} },\n        { name: _name, schema: { nullable: _nullable } = {} }\n      ) => {\n        if (!nullable && _nullable) {\n          return -1;\n        } else if (nullable && !_nullable) {\n          return 1;\n        }\n\n        return isAscending(name, _name);\n      }\n    )\n    .reduce(\n      (\n        prev,\n        {\n          schema: {\n            deprecated,\n            \"x-deprecatedMessage\": deprecatedMessage,\n            example,\n            nullable,\n          } = {},\n          schema,\n          name,\n        }\n      ) => {\n        return `${prev}${getJsdoc({\n          ...schema,\n          deprecated:\n            deprecated || deprecatedMessage ? deprecatedMessage : undefined,\n          example,\n        })}\"${name}\"${nullable ? \"?\" : \"\"}: ${getTsType(schema)};`;\n      },\n      \"\"\n    );\n\n  return object ? `{${object}}` : \"\";\n}\nfunction getSchemaName(name) {\n  const removeDot = replaceWithUpper(name, \".\");\n  const removeBackTick = replaceWithUpper(removeDot, \"`\");\n  const removeFirstBracket = replaceWithUpper(removeBackTick, \"[\");\n  const removeLastBracket = replaceWithUpper(removeFirstBracket, \"]\");\n  return removeLastBracket;\n}\n\nfunction getRefName($ref) {\n  const parts = $ref.split(\"/\").pop();\n  return getSchemaName(parts || \"\");\n}\n\nfunction isAscending(a, b) {\n  if (a > b) {\n    return 1;\n  }\n  if (b > a) {\n    return -1;\n  }\n  return 0;\n}\n\nfunction getParametersInfo(parameters = [], type) {\n  const params =\n    parameters.filter(({ in: In }) => {\n      return In === type;\n    }) || [];\n\n  return {\n    params,\n    exist: params.length > 0,\n    isNullable: params.every(({ schema }) => schema.nullable),\n  };\n}\n\nfunction majorVersionsCheck(expectedV, inputV) {\n  if (!inputV) {\n    throw new Error(\n      `Swagger-Typescript working with openApi v3/ swagger v2, seem your json is not openApi openApi v3/ swagger v2`\n    );\n  }\n\n  const expectedVMajor = expectedV.split(\".\")[0];\n  const inputVMajor = inputV.split(\".\")[0];\n  function isValidPart(x) {\n    return /^\\d+$/.test(x);\n  }\n  if (!isValidPart(expectedVMajor) || !isValidPart(inputVMajor)) {\n    throw new Error(\n      `Swagger-Typescript working with openApi v3/ swagger v2 your json openApi version is not valid \"${inputV}\"`\n    );\n  }\n\n  const expectedMajorNumber = Number(expectedVMajor);\n  const inputMajorNumber = Number(inputVMajor);\n\n  if (expectedMajorNumber <= inputMajorNumber) {\n    return;\n  }\n\n  throw new Error(\n    `Swagger-Typescript working with openApi v3/ swagger v2 your json openApi version is ${inputV}`\n  );\n}\n\nfunction isTypeAny(type) {\n  if (type === true) {\n    return true;\n  }\n\n  if (typeof type === \"object\" && Object.keys(type).length <= 0) {\n    return true;\n  }\n\n  if (!type || type.AnyValue) {\n    return true;\n  }\n\n  return false;\n}\n\n/** Used to replace {name} in string with obj.name */\nfunction template(str, obj = {}) {\n  Object.entries(obj).forEach(([key, value]) => {\n    const re = new RegExp(`{${key}}`, \"i\");\n    str = str.replace(re, value);\n  });\n\n  const re = new RegExp(\"{*}\", \"g\");\n  if (re.test(str)) {\n    throw new Error(`methodName: Some A key is missed \"${str}\"`);\n  }\n  return str;\n}\n\nfunction isMatchWholeWord(stringToSearch, word) {\n  return new RegExp(\"\\\\b\" + word + \"\\\\b\").test(stringToSearch);\n}\n\nexport {\n  majorVersionsCheck,\n  getPathParams,\n  getHeaderParams,\n  generateServiceName,\n  getTsType,\n  getRefName,\n  isAscending,\n  getDefineParam,\n  getParamString,\n  getParametersInfo,\n  isTypeAny,\n  template,\n  toPascalCase,\n  getSchemaName,\n  isMatchWholeWord,\n};\n"]}