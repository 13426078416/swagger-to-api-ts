{"version":3,"sources":["../src/init.js"],"names":["prettierContent","defaultPrettierConfig","parser","trailingComma","printWidth","arrowParens","jsxBracketSameLine","endOfLine","proseWrap","params","prettier","format","replaceComponents","input","newJson","refs","components","map","key","forEach","name","schema","includes","findRefs","obj","Array","isArray","flatMap","value","replace","findRelatedRef","schemaRefs","newRefs","filter","ref","length","error","chalk","red","partialUpdateJson","paths","tag","filteredPaths","Object","fromEntries","_","tags","find","item","i","endPoint","method","options","concat","swaggerToOpenApi","patch","warnOnly","resolve","reject","converter","convertObj","err","result","openapi","Generate","configs","JSON","parse","fs","readFileSync","toString","data","ele","init","config","path","process","cwd","Axios","get","url","content","yaml","load","code","type","outputFileSync","dir","console","log","yellowBright","a"],"mappings":"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","file":"init.js","sourcesContent":["\nimport Axios from \"axios\";\nimport yaml from \"js-yaml\";\nimport fs from \"fs-extra\";\nimport converter from \"swagger2openapi\";\nimport chalk from \"chalk\";\nimport { generator } from \"./aaa/generator\";\nimport prettier from \"prettier\";\nexport const defaultPrettierConfig = {\n  parser: \"typescript\",\n  trailingComma: \"all\",\n  printWidth: 100,\n  arrowParens: \"always\",\n  jsxBracketSameLine: false,\n  endOfLine: \"lf\",\n  proseWrap: \"always\",\n};\nexport function prettierContent(params) {\n  return prettier.format(params, defaultPrettierConfig);\n}\n\nfunction replaceComponents(input, newJson, refs) {\n  const components = {\n    ...(input.components || {}),\n  };\n\n  [\"schemas\", \"requestBodies\", \"parameters\"].map((key) => {\n    if (newJson.components[key]) {\n      Object.entries(newJson.components[key]).forEach(([name, schema]) => {\n        if (refs.includes(name)) {\n          if (!components[key]) {\n            components[key] = {\n              ...((input.components && input.components[key]) || {}),\n            };\n          }\n          components[key][name] = schema;\n        }\n      });\n    }\n  });\n\n  return components;\n}\n\nfunction findRefs(obj) {\n  if (typeof obj !== \"object\") {\n    return [];\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.flatMap((value) => {\n      return findRefs(value);\n    });\n  }\n\n  return Object.entries(obj).flatMap(([key, value]) => {\n    if (key === \"$ref\") {\n      return [value.replace(/#\\/components\\/[\\w]+\\//g, \"\")];\n    }\n    return findRefs(value);\n  });\n}\n\nfunction findRelatedRef(newJson, refs) {\n  try {\n    [\"schemas\", \"requestBodies\", \"parameters\"].map((key) => {\n      if (newJson.components[key]) {\n        Object.entries(newJson.components[key]).forEach(([name, schema]) => {\n          if (refs.includes(name)) {\n            const schemaRefs = findRefs(schema);\n\n            const newRefs = schemaRefs.filter((ref) => !refs.includes(ref));\n\n            if (newRefs.length > 0) {\n              refs = findRelatedRef(newJson, [...refs, ...newRefs]);\n            }\n          }\n        });\n      }\n    });\n  } catch (error) {\n    chalk.red(error);\n  }\n\n  return refs;\n}\nfunction partialUpdateJson(input = { paths: [] }, newJson, tag) {\n  let refs = [];\n\n  const filteredPaths = Object.fromEntries(\n    Object.entries(input.paths).map(([name, value]) => [\n      name,\n      Object.fromEntries(\n        Object.entries(value).filter(\n          ([_, { tags }]) => !tags.find((item) => tag.find((i) => i === item))\n        )\n      ),\n    ])\n  );\n\n  const paths = { ...filteredPaths };\n  Object.entries(newJson.paths).forEach(([endPoint, value]) => {\n    Object.entries(value).forEach(([method, options]) => {\n      if (typeof options !== \"object\") {\n        return;\n      }\n\n      //   if (tag.find((t) => options.tags.includes(t))) {\n      refs = refs.concat(findRefs(options));\n\n      if (!paths[endPoint]) {\n        paths[endPoint] = {\n          ...newJson.paths[endPoint],\n        };\n      }\n      paths[endPoint][method] = options;\n      //   }\n    });\n  });\n\n  refs = findRelatedRef(newJson, refs);\n\n  const components = replaceComponents(input, newJson, refs);\n\n  return {\n    ...input,\n    paths,\n    components,\n  };\n}\n\nfunction swaggerToOpenApi(input) {\n  const options = {};\n  options.patch = true; // fix up small errors in the source definition\n  options.warnOnly = true; // Do not throw on non-patchable errors\n  return new Promise((resolve, reject) => {\n    converter.convertObj(input, options, function (err, result) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(result.openapi);\n    });\n  });\n}\nexport class Generate {\n  constructor() {\n    const configs = JSON.parse(\n      fs.readFileSync(\"swagger.config.json\").toString()\n    ).data;\n    configs.forEach((ele) => this.init(ele));\n  }\n\n  async init(config) {\n    this.path = process.cwd();\n    let { data: content } = await Axios.get(config.url);\n    if (typeof content !== \"object\") {\n      content = yaml.load(content);\n    }\n    let input = await swaggerToOpenApi(content);\n    input = partialUpdateJson({ paths: [] }, input, []);\n    const { code, type } = generator(input, config);\n    fs.outputFileSync(\n      `${config.dir}/api/${config.name}.ts`,\n      prettierContent(code)\n    );\n    console.log(chalk.yellowBright(\"services Completed\"));\n\n    fs.outputFileSync(\n      `${config.dir}/interface/${config.name}.ts`,\n      prettierContent(type)\n    );\n    console.log(chalk.yellowBright(\"types Completed\"));\n  }\n}\n\nconst a = new Generate();\n"]}